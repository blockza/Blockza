type anon_class_20_1 = 
 service {
   add_reward: (principal, nat) -> (bool);
   add_user: () -> (Result_1);
   assign_role: (principal, text, Role__1) -> (Result_1);
   block_user: (text, text) -> (Result_1);
   check_user_exists: (principal) -> (bool);
   claim_rewards: (text) -> (bool);
   entry_require_permission: (principal, Permission) -> (bool) query;
   get_authorized_users: (text, nat, nat) ->
    (record {
       amount: nat;
       users: vec record {
                    Id;
                    ListUser;
                  };
     }) query;
   get_subAdmin_users: (text, nat, nat) ->
    (record {
       amount: nat;
       users: vec record {
                    Id;
                    ListAdminUser;
                  };
     }) query;
   get_user_details: (UserId) -> (Result_2) query;
   make_admin: (principal, Role__1) -> (bool);
   unBlock_user: (text, text) -> (Result_1);
   unclaimed_rewards: () -> (nat);
   update_user: (InputUser) -> (Result);
   who_am_i: () -> (text) query;
 };
type UserId = opt text;
type User = 
 record {
   authorDescription: opt text;
   authorInfo: opt text;
   authorTitle: opt text;
   bannerImg: opt ImageObject;
   dob: opt text;
   email: opt text;
   facebook: opt text;
   gender: opt text;
   instagram: opt text;
   isBlocked: bool;
   joinedFrom: int;
   linkedin: opt text;
   name: opt text;
   profileImg: opt ImageObject;
   rewards: Rewards;
   role: Role;
   twitter: opt text;
   website: opt text;
 };
type Role__1 = 
 variant {
   admin;
   article_admin;
   authorized;
   sub_admin;
   user_admin;
 };
type Role = 
 variant {
   admin;
   article_admin;
   authorized;
   sub_admin;
   user_admin;
 };
type Rewards = vec Reward;
type Reward = 
 record {
   amount: nat;
   claimed_at: opt int;
   creation_time: int;
   isClaimed: bool;
 };
type Result_2 = 
 variant {
   err: text;
   ok: record {
         text;
         User;
         bool;
       };
 };
type Result_1 = 
 variant {
   err: text;
   ok: record {
         text;
         User;
       };
 };
type Result = 
 variant {
   err: text;
   ok: record {
         text;
         User;
         opt User;
       };
 };
type Permission = 
 variant {
   assign_role;
   manage_article;
   manage_user;
   write;
 };
type ListUser = 
 record {
   email: opt text;
   isBlocked: bool;
   joinedFrom: int;
   name: opt text;
 };
type ListAdminUser = 
 record {
   email: opt text;
   joinedFrom: int;
   name: opt text;
   role: Role;
 };
type InputUser = 
 record {
   authorDescription: text;
   authorInfo: text;
   authorTitle: text;
   bannerImg: opt ImageObject;
   dob: text;
   email: text;
   facebook: text;
   gender: text;
   instagram: text;
   linkedin: text;
   name: text;
   profileImg: opt ImageObject;
   twitter: text;
   website: text;
 };
type ImageObject = vec nat8;
type Id = principal;
service : () -> anon_class_20_1
